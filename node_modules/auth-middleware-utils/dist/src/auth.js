"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.userAccess = exports.superAdminAccess = exports.getUserLogin = exports.authMiddleware = exports.adminAccess = void 0;
const httpContext = __importStar(require("express-http-context"));
const jwtUtils_1 = require("./utils/jwtUtils");
const serverless_mongodb_utils_1 = require("serverless-mongodb-utils");
const Role_1 = require("./entities/Role");
const AuthLogin_1 = require("./entities/AuthLogin");
const User_1 = require("./entities/User");
const authMiddleware = (req, res, next) => {
    const token = req.cookies.sessionToken;
    if (token == null) {
        next();
    }
    else {
        checkAccess(token, res, next);
    }
};
exports.authMiddleware = authMiddleware;
const adminAccess = (req, res, next) => {
    const token = req.cookies.sessionToken;
    if (token == null) {
        send401(res);
    }
    else {
        checkAccess(token, res, next, [Role_1.AuthRole.SuperAdmin, Role_1.AuthRole.Admin]);
    }
};
exports.adminAccess = adminAccess;
const send401 = (res) => {
    res.clearCookie('sessionToken');
    res.clearCookie('authenticated');
    res.status(401).send({
        message: 'UNAUTHORIZED_ACCESS',
        success: false,
        status: 401
    });
};
const checkAccess = (token, res, next, roles) => {
    try {
        (0, jwtUtils_1.verifyToken)(token);
        void (0, serverless_mongodb_utils_1.findOneOrFail)(AuthLogin_1.authLoginsCollection, { sessionToken: token })
            .then(userLogin => {
            void (0, serverless_mongodb_utils_1.findOneOrFail)(User_1.usersCollection, { email: userLogin.email })
                .then(user => {
                httpContext.set('userLogin', userLogin);
                if (roles === undefined) {
                    next();
                }
                else if (roles.includes(user.role.name)) {
                    next();
                }
                else {
                    send401(res);
                }
            });
        }).catch(next);
    }
    catch (err) {
        console.error('error occured during authentication');
        send401(res);
    }
};
const superAdminAccess = (req, res, next) => {
    const token = req.cookies.sessionToken;
    if (token == null) {
        send401(res);
    }
    else {
        checkAccess(token, res, next, [Role_1.AuthRole.SuperAdmin]);
    }
};
exports.superAdminAccess = superAdminAccess;
const userAccess = (req, res, next) => {
    const token = req.cookies.sessionToken;
    if (token == null) {
        send401(res);
    }
    else {
        checkAccess(token, res, next, [Role_1.AuthRole.SuperAdmin, Role_1.AuthRole.Admin, Role_1.AuthRole.User]);
    }
};
exports.userAccess = userAccess;
const getUserLogin = () => {
    return httpContext.get('userLogin');
};
exports.getUserLogin = getUserLogin;
