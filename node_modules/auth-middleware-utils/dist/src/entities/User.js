"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUserCollection = exports.usersCollection = void 0;
const serverless_mongodb_utils_1 = require("serverless-mongodb-utils");
exports.usersCollection = 'users';
const createUserCollection = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const database = yield (0, serverless_mongodb_utils_1.connectToDb)();
        // Create a collection
        const options = {
            validator: {
                $jsonSchema: {
                    bsonType: 'object',
                    required: ['_id', 'firstName', 'lastName', 'email', 'employeeId'],
                    properties: {
                        _id: {
                            bsonType: 'objectId'
                        },
                        firstName: {
                            bsonType: 'string'
                        },
                        lastName: {
                            bsonType: 'string'
                        },
                        email: {
                            bsonType: 'string'
                        },
                        employeeId: {
                            bsonType: 'string'
                        },
                        phoneNumber: {
                            bsonType: 'string'
                        },
                        role: {
                            bsonType: 'object'
                        }
                    }
                }
            }
        };
        const collection = yield database.createCollection(exports.usersCollection, options);
        // Create unique indexes
        yield collection.createIndex({ email: 1 }, { unique: true });
        yield collection.createIndex({ employeeId: 1 }, { unique: true });
    }
    catch (error) {
        console.error(`Error in creating Appraisal Card : ${String(error)}`);
    }
});
exports.createUserCollection = createUserCollection;
