"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserLogin = exports.countDocuments = exports.save = exports.deleteDocuments = exports.runAggregation = exports.find = exports.findOneOrFail = exports.findOne = exports.findByIds = exports.findById = exports.getCollection = exports.connectToDb = void 0;
const mongodb_1 = require("mongodb");
const httpContext = __importStar(require("express-http-context"));
const audit_1 = require("./audit/audit");
const url = (_a = process.env.MONGODB_URL) !== null && _a !== void 0 ? _a : '';
const dbName = (_b = process.env.MONGODB_DB_NAME) !== null && _b !== void 0 ? _b : '';
let cachedDb = null;
// connect to db
const connectToDb = () => __awaiter(void 0, void 0, void 0, function* () {
    if (cachedDb != null) {
        return cachedDb;
    }
    const client = yield mongodb_1.MongoClient.connect(url);
    const db = client.db(dbName);
    cachedDb = db;
    return db;
});
exports.connectToDb = connectToDb;
const getCollection = (collectionName) => __awaiter(void 0, void 0, void 0, function* () {
    const db = yield (0, exports.connectToDb)();
    const collection = db.collection(collectionName);
    console.log(`Got collection with the name '${collection.collectionName}'`);
    return collection;
});
exports.getCollection = getCollection;
const findById = (collectionName, id) => __awaiter(void 0, void 0, void 0, function* () {
    const collection = yield (0, exports.getCollection)(collectionName);
    const document = yield collection.findOne({ _id: new mongodb_1.ObjectId(id) });
    return document;
});
exports.findById = findById;
const findByIds = (collectionName, ids, query) => __awaiter(void 0, void 0, void 0, function* () {
    const collection = yield (0, exports.getCollection)(collectionName);
    const documents = yield collection.find(Object.assign({ _id: { $in: ids.map(id => new mongodb_1.ObjectId(id)) } }, query)).toArray();
    return documents;
});
exports.findByIds = findByIds;
// find one document or return null
const findOne = (collectionName, query) => __awaiter(void 0, void 0, void 0, function* () {
    const collection = yield (0, exports.getCollection)(collectionName);
    const document = yield collection.findOne(Object.assign({}, query));
    return document;
});
exports.findOne = findOne;
const findOneOrFail = (collectionName, query) => __awaiter(void 0, void 0, void 0, function* () {
    const collection = yield (0, exports.getCollection)(collectionName);
    const document = yield collection.findOne(Object.assign({}, query));
    if (document == null) {
        throw new Error(`No document matches ${Object.keys(query !== null && query !== void 0 ? query : {}).join(', ')}`);
    }
    return document;
});
exports.findOneOrFail = findOneOrFail;
const find = (collectionName, query, page, pageSize) => __awaiter(void 0, void 0, void 0, function* () {
    const collection = yield (0, exports.getCollection)(collectionName);
    const skip = ((page != null) ? page - 1 : 0) * (pageSize !== null && pageSize !== void 0 ? pageSize : 50);
    const documents = yield collection.find(Object.assign({}, query)).sort({ _id: -1 }).skip(skip).limit(pageSize !== null && pageSize !== void 0 ? pageSize : 50).toArray();
    return documents;
});
exports.find = find;
const runAggregation = (collectionName, pipeline) => __awaiter(void 0, void 0, void 0, function* () {
    const collection = yield (0, exports.getCollection)(collectionName);
    const result = yield collection.aggregate(pipeline).toArray();
    return result;
});
exports.runAggregation = runAggregation;
const deleteDocuments = (collectionName_1, query_1, ...args_1) => __awaiter(void 0, [collectionName_1, query_1, ...args_1], void 0, function* (collectionName, query, failIfNoMatch = false) {
    const collection = yield (0, exports.getCollection)(collectionName);
    let deleteResult;
    if (Array.isArray(query)) {
        deleteResult = yield collection.deleteMany({ _id: { $in: query.map(id => new mongodb_1.ObjectId(id)) } });
    }
    else {
        deleteResult = yield collection.deleteOne(query !== null && query !== void 0 ? query : {});
    }
    const userLogin = (0, exports.getUserLogin)();
    yield (0, audit_1.auditRecord)(userLogin.user._id, userLogin.user.email, 'DELETE', JSON.stringify(query), new Date(), collectionName);
    if (failIfNoMatch && deleteResult.deletedCount === 0) {
        throw new Error('NO_MATCH' + JSON.stringify(query));
    }
});
exports.deleteDocuments = deleteDocuments;
// save a document
const save = (collectionName, document) => __awaiter(void 0, void 0, void 0, function* () {
    var _c, _d, _e, _f;
    const collection = yield (0, exports.getCollection)(collectionName);
    const userLogin = (0, exports.getUserLogin)();
    const userId = (_d = (_c = userLogin === null || userLogin === void 0 ? void 0 : userLogin.user) === null || _c === void 0 ? void 0 : _c._id) !== null && _d !== void 0 ? _d : 'SYSTEM';
    const userName = (_f = (_e = userLogin === null || userLogin === void 0 ? void 0 : userLogin.user) === null || _e === void 0 ? void 0 : _e.email) !== null && _f !== void 0 ? _f : 'SYSTEM';
    if (Array.isArray(document)) {
        for (const doc of document) {
            const { _id } = doc, rest = __rest(doc, ["_id"]);
            if (_id !== undefined && _id !== null) {
                yield collection.updateOne({ _id: new mongodb_1.ObjectId(String(_id)) }, { $set: rest }, { upsert: true });
                yield (0, audit_1.auditRecord)(userId, userName, 'UPDATE', _id, new Date(), collectionName);
            }
            else {
                const insertResult = yield collection.insertOne(doc);
                yield (0, audit_1.auditRecord)(userId, userName, 'INSERT', insertResult.insertedId.toHexString(), new Date(), collectionName);
            }
        }
    }
    else {
        const { _id } = document, rest = __rest(document, ["_id"]);
        if (_id !== undefined && _id !== null) {
            yield collection.updateOne({ _id: new mongodb_1.ObjectId(String(_id)) }, { $set: rest }, { upsert: true });
            yield (0, audit_1.auditRecord)(userId, userName, 'UPDATE', _id, new Date(), collectionName);
        }
        else {
            const result = yield collection.insertOne(document);
            yield (0, audit_1.auditRecord)(userId, userName, 'INSERT', result.insertedId.toHexString(), new Date(), collectionName);
        }
    }
    return document;
});
exports.save = save;
const countDocuments = (collectionName, query) => __awaiter(void 0, void 0, void 0, function* () {
    const collection = yield (0, exports.getCollection)(collectionName);
    const count = yield collection.countDocuments(Object.assign({}, query));
    return count;
});
exports.countDocuments = countDocuments;
const getUserLogin = () => {
    return httpContext.get('userLogin');
};
exports.getUserLogin = getUserLogin;
