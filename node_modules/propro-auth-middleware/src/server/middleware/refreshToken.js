const axios = require("axios");
const rateLimit = require("express-rate-limit");
const refreshTokenCache = new Map();

/**
 * Rate limiter middleware for refresh requests.
 *
 * @type {import('express-rate-limit').RateLimit}
 */
const refreshLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)
  message:
    "Too many refresh requests from this IP, please try again after 15 minutes",
});

/**
 * Middleware function to refresh access token using refresh token.
 * @async
 * @function
 * @param {Object} req - Express request object.
 * @param {Object} res - Express response object.
 * @param {Function} next - Express next middleware function.
 * @returns {Promise<void>} - Promise object that represents the completion of the middleware function.
 */
const refreshTokenMiddleware = async (req, res, next) => {
  // Apply rate limiting
  refreshLimiter(req, res, async () => {
    const refreshToken = req.headers["x-refresh-token"];

    if (!refreshToken) {
      return res.status(401).json({ error: "No refresh token provided" });
    }

    if (!isValidRefreshTokenFormat(refreshToken)) {
      return res.status(400).json({ error: "Invalid refresh token format" });
    }

    if (refreshTokenCache.has(refreshToken)) {
      req.newAccessToken = refreshTokenCache.get(refreshToken);
      return next();
    }

    try {
      const response = await axios.post(
        `${process.env.AUTH_URL}/oauth/token`,
        URLSearchParams({
          grant_type: "refresh_token",
          refresh_token: refreshToken,
          client_id: process.env.CLIENT_ID,
          client_secret: process.env.CLIENT_SECRET,
        }),
        { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
      );

      if (response.data && response.data.access_token) {
        refreshTokenCache.set(refreshToken, response.data.access_token);
        req.newAccessToken = response.data.access_token;
        return next();
      } else {
        return res.status(401).json({ error: "Unable to refresh token" });
      }
    } catch (error) {
      const statusCode = error.response?.status || 500;
      const message = error.response?.data?.error || "Error refreshing token";
      return res.status(statusCode).json({ error: message });
    }
  });
};

/**
 * Checks if the given token is in a valid JWT format.
 *
 * @param {string} token - The token to validate.
 * @returns {boolean} - True if the token is in a valid format, false otherwise.
 */
function isValidRefreshTokenFormat(token) {
  const jwtPattern = /^[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+$/;
  return jwtPattern.test(token);
}

module.exports = refreshTokenMiddleware;
