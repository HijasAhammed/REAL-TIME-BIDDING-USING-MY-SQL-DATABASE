const axios = require("axios");
const jwt = require("jsonwebtoken");
const tokenCache = new Map();

/**
 * Verifies a JSON Web Token (JWT) using the provided secret.
 * @param {string} token - The JWT to be verified.
 * @param {string} secret - The secret used to sign the JWT.
 * @returns {object|null} - The decoded payload of the JWT if it is valid, or null if it is not valid.
 */
function verifyJWT(token, secret) {
  try {
    return jwt.verify(token, secret);
  } catch (err) {
    return null;
  }
}

/**
 * Exchanges an authorization code for an access token.
 * @param {string} authUrl - The URL of the authorization server.
 * @param {string} code - The authorization code.
 * @param {string} clientId - The client ID.
 * @param {string} clientSecret - The client secret.
 * @param {string} redirectUri - The redirect URI.
 * @returns {Promise<Object>} - The response data containing the access token.
 */
async function exchangeToken(
  authUrl,
  code,
  clientId,
  clientSecret,
  redirectUri
) {
  const response = await axios.post(
    `${authUrl}/authorize`,
    qs.stringify({
      grant_type: "authorization_code",
      code: code,
      redirect_uri: redirectUri,
      client_id: clientId,
      client_secret: clientSecret,
    }),
    { headers: { "Content-Type": "application/json" } }
  );
  return response.data;
}

/**
 * Middleware function to verify user account and permissions
 * @param {Array} requiredPermissions - Array of required permissions for the user
 * @returns {Function} - Express middleware function
 */
const VerifyAccount = (requiredPermissions) => {
  return async (req, res, next) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    if (!accessToken) {
      return res.status(401).json({ error: "Access token is required" });
    }

    // Check if token is in cache
    if (tokenCache.has(accessToken)) {
      req.user = tokenCache.get(accessToken);
      return next();
    }

    try {
      const decoded = jwt.verify(accessToken, process.env.JWT_SECRET);
      if (!isValid(decoded, requiredPermissions)) {
        return res.status(403).json({ error: "Invalid permissions" });
      }
      tokenCache.set(accessToken, decoded);
      req.user = decoded;
      return next();
    } catch (error) {
      try {
        const userResponse = await axios.get(
          `${process.env.AUTH_URL}/api/user`,
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
            },
          }
        );

        if (!isValid(userResponse.data, requiredPermissions)) {
          return res.status(403).json({ error: "Invalid permissions" });
        }

        tokenCache.set(accessToken, userResponse.data);
        req.user = userResponse.data;
        return next();
      } catch (networkError) {
        return res.status(500).json({ error: "Error validating token" });
      }
    }
  };
};

/**
 * Checks if the decoded token has all the required permissions.
 * @param {object} decodedToken - The decoded token object.
 * @param {string[]} requiredPermissions - An array of required permissions.
 * @returns {boolean} - Returns true if the decoded token has all the required permissions, false otherwise.
 */
function isValid(decodedToken, requiredPermissions) {
  return requiredPermissions.every((permission) =>
    decodedToken.permissions.includes(permission)
  );
}

module.exports = {
  VerifyAccount,
  exchangeToken,
  verifyJWT,
};
