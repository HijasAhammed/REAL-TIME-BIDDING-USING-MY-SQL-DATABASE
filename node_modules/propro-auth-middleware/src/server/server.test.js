const request = require("supertest");
const express = require("express");
const app = express();
const axios = require("axios");
jest.mock("axios");

require("./index.js")(app);

describe("GET /auth", () => {
  it("should redirect to the auth client", async () => {
    const res = await request(app).get("/auth");
    expect(res.statusCode).toEqual(302);
    expect(res.headers.location).toContain(process.env.CLIENT_URL);
  });
});

describe("GET /callback", () => {
  it("should exchange code for tokens", async () => {
    const mockCode = "mockCode";
    const mockTokenResponse = {
      data: {
        access_token: "mockAccessToken",
        refresh_token: "mockRefreshToken",
      },
    };
    axios.post.mockResolvedValue(mockTokenResponse);

    const res = await request(app).get(`/callback?code=${mockCode}`);
    expect(res.statusCode).toEqual(302);
    expect(res.headers.location).toContain(mockTokenResponse.data.access_token);
  });

  it("should respond with 400 if no code is provided", async () => {
    const res = await request(app).get("/callback");
    expect(res.statusCode).toEqual(400);
  });
});
