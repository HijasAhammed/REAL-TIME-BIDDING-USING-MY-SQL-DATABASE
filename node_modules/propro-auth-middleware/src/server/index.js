const {
  verifyJWT,
  exchangeToken,
  VerifyAccount,
} = require("./middleware/verifyToken");
// Main middleware function
function proproAuthMiddleware(options = {}) {
  const {
    secret = "RESTFULAPIs",
    authUrl = process.env.AUTH_URL,
    clientId = process.env.CLIENT_ID,
    clientSecret = process.env.CLIENT_SECRET,
    clientUrl = process.env.CLIENT_URL,
    redirectUri = process.env.REDIRECT_URI,
  } = options;

  return async (req, res, next) => {
    try {
      if (req.headers.authorization?.startsWith("Bearer ")) {
        const token = req.headers.authorization.split(" ")[1];
        req.account = verifyJWT(token, secret);
      } else {
        req.account = undefined;
      }

      if (!["/api/auth", "/api/callback"].includes(req.path)) {
        return next();
      }

      if (req.path === "/api/auth") {
        const authClientUrl = `${clientUrl}/signin`;
        return res.redirect(
          `${authClientUrl}?response_type=code&client_id=${clientId}&redirect_uri=${encodeURIComponent(
            redirectUri
          )}`
        );
      }

      if (req.path === "/api/callback") {
        const code = req.query.code;
        if (!code) {
          return res.status(400).send("No code received");
        }

        const tokenData = await exchangeToken(
          authUrl,
          code,
          clientId,
          clientSecret,
          redirectUri
        );
        res.cookie("token", tokenData.access_token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
        });

        return res.redirect(
          `${clientUrl}/?access_token=${tokenData.access_token}&refresh_token=${tokenData.refresh_token}`
        );
      }
    } catch (error) {
      console.error("Error in proproAuthMiddleware:", error);
      res.status(500).send("Internal Server Error");
    }
  };
}

module.exports = proproAuthMiddleware;
