const {
  validateEnvironmentVariables,
} = require("./server/middleware/validateEnv");
let _serverAuth, _clientAuth;

/**
 * Middleware for handling both server-side and client-side authentication.
 *
 * @param {Object} options - Configuration options for the middleware.
 * @param {boolean} [options.useServerAuth=true] - A boolean flag to enable server-side authentication.
 * @param {Object} [options.serverOptions={}] - Configuration options for server-side authentication.
 *   Example:
 *   {
 *     jwtSecret: 'HubHubJWTSecret', // Secret key for JWT token verification
 *     tokenExpiry: 3600, // Token expiry time in seconds
 *     authUrl: 'https://propro.so/auth', // URL of the authentication server
 *     clientId: 'propro', // Client ID
 *     clientSecret: 'propro', // Client secret
 *     clientUrl: 'https://propro.so', // URL of the authentication client
 *     redirectUri: 'https://propro.so/callback', // Redirect URI
 *     validateUser: async (userId) => {  }, // Function to validate user
 *     onAuthFailRedirect: '/login', // URL to redirect on authentication failure
 *     additionalChecks: async (req) => {  }, // Additional custom checks for requests
 *   }
 * @param {boolean} [options.useClientAuth=false] - A boolean flag to enable client-side authentication.
 * @param {Object} [options.clientOptions={}] - Configuration options for client-side authentication.
 *
 * @returns {Function} An Express middleware function.
 *
 * Example usage:
 * app.use(proproAuthMiddleware({
 *   useServerAuth: true,
 *   serverOptions: {
 *     jwtSecret: 'HubHubJWTSecret',
 *     tokenExpiry: 3600,
 *     validateUser: async (userId) => {  },
 *     onAuthFailRedirect: '/login',
 *     additionalChecks: async (req) => { },
 *   },
 *   useClientAuth: false,
 * }));
 */
module.exports = function proproAuthMiddleware(options = {}) {
  validateEnvironmentVariables([
    "AUTH_URL",
    "CLIENT_ID",
    "CLIENT_SECRET",
    "CLIENT_URL",
    "REDIRECT_URI",
  ]);
  return (req, res, next) => {
    try {
      // Lazy loading and initializing server and client authentication modules with options
      if (options.useServerAuth) {
        _serverAuth = _serverAuth || require("./server")(options.serverOptions);
        _serverAuth(req, res, next);
      } else if (options.useClientAuth) {
        _clientAuth = _clientAuth || require("./client")(options.clientOptions);
        _clientAuth(req, res, next);
      } else {
        next();
      }
    } catch (error) {
      console.error("Error in authentication middleware:", error);
      next(error);
    }
  };
};
